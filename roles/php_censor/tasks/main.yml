---

- name:     Check if PHP Censor directory is exists
  stat:     path="/var/www/{{ php_censor_hostname }}/current"
  register: site_directory

- name:     Register release datetime
  command:  date +%Y%m%d%H%M%S
  register: release_datetime
  when:     not site_directory.stat.exists

- name: Install Beanstalkd queue
  apt:  name="beanstalkd" state=latest

- name: Copy PHP Censor DB dump to host
  copy: src="{{ role_path }}/files/{{ php_censor_db_dump_filename }}.sql" dest="/tmp"

- name:          Create PHP Censor DB
  postgresql_db: name="{{ php_censor_db_name }}" state=present
  become:        true
  become_user:   postgres
  register:      php_censor_database

- name:            Create PHP Censor DB user
  postgresql_user: db="{{ php_censor_db_name }}" name="{{ php_censor_db_user }}" password="{{ php_censor_db_password }}" role_attr_flags="NOSUPERUSER,NOCREATEDB" encrypted=yes priv=ALL
  become:          true
  become_user:     postgres

- name:          Restore PHP Censor DB dump
  postgresql_db: name="{{ php_censor_db_name }}" state=restore target="/tmp/{{ php_censor_db_dump_filename }}.sql" login_user="{{ php_censor_db_user }}" login_password="{{ php_censor_db_password }}" login_host=localhost
  when:          php_censor_database.changed

- name: Create the SSH public key file
  copy: content="{{lookup('file', '~/.ssh/github.pub')}}" dest=/root/.ssh/github.pub mode=0600

- name: Create the SSH private key file
  copy: content="{{lookup('file', '~/.ssh/github')}}" dest=/root/.ssh/github mode=0600

- name: Clone latest PHP Censor repository
  git:  repo="git@github.com:php-censor/php-censor.git" version="{{ php_censor_version }}" dest="/var/www/{{ php_censor_hostname }}/releases/{{ release_datetime.stdout }}" key_file="/root/.ssh/github" accept_hostkey=yes
  when: not site_directory.stat.exists

- name: Set current release link
  file: src="/var/www/{{ php_censor_hostname }}/releases/{{ release_datetime.stdout }}" dest="/var/www/{{ php_censor_hostname }}/current" state=link
  when: not site_directory.stat.exists

- name: Delete shared directories
  file: path="/var/www/{{ php_censor_hostname }}/current/runtime" state=absent
  when: not site_directory.stat.exists

- name: Creates sharted directories
  file: path="{{ item }}" state=directory
  loop:
    - "/var/www/{{ php_censor_hostname }}/shared/runtime/builds"
    - "/var/www/{{ php_censor_hostname }}/shared/runtime/cache"
    - "/var/www/{{ php_censor_hostname }}/shared/runtime/status_cache"
  when: not site_directory.stat.exists

- name: Set shared directory link
  file: src="/var/www/{{ php_censor_hostname }}/shared/runtime" dest="/var/www/{{ php_censor_hostname }}/current/runtime" state=link
  when: not site_directory.stat.exists

- name:     Create PHP Censor application config
  template: src=config.yml dest="/var/www/{{ php_censor_hostname }}/current/app/config.yml"
  when:     not site_directory.stat.exists

- name: Delete non-production files
  file: path="{{ item }}" state=absent
  loop:
    - "/var/www/{{ php_censor_hostname }}/current/.git"
  when: not site_directory.stat.exists

- name: Set permitions for PHP Censor directory
  file: path="/var/www/{{ php_censor_hostname }}" owner={{ php_censor_user }} group={{ php_censor_group }} mode="ug=rwX,o=rX" recurse=yes
  when: not site_directory.stat.exists

- name: Set PHP Censor console executable
  file: path="/var/www/{{ php_censor_hostname }}/current/bin" owner={{ php_censor_user }} group={{ php_censor_group }} mode="ugo+x" recurse=yes
  when: not site_directory.stat.exists

- name:        Install PHP Censor dependencies
  command:     composer install --no-dev --optimize-autoloader
  become:      yes
  become_user: "{{ php_censor_user }}"
  args:
    chdir:   "/var/www/{{ php_censor_hostname }}/current"
    creates: "/var/www/{{ php_censor_hostname }}/current/vendor"
  when: not site_directory.stat.exists

- name:        Install PHP Censor Telegram plugin
  command:     composer require --optimize-autoloader lexasoft/php-censor-telegram-plugin:~2.0
  become:      yes
  become_user: "{{ php_censor_user }}"
  args:
    chdir:   "/var/www/{{ php_censor_hostname }}/current"
    creates: "/var/www/{{ php_censor_hostname }}/current/vendor/lexasoft/php-censor-telegram-plugin"
  when: not site_directory.stat.exists

- name:        Make migrations
  command:     ./bin/console php-censor-migrations:migrate
  become:      yes
  become_user: "{{ php_censor_user }}"
  args:
    chdir: "/var/www/{{ php_censor_hostname }}/current"
  when: not site_directory.stat.exists

- name:     Create PHP Censor host
  template: src=php_censor.conf dest="/etc/nginx/sites-available/{{ php_censor_hostname }}.conf"
  when:     not site_directory.stat.exists

- name:   Enable PHP Censor host
  file:   src="/etc/nginx/sites-available/{{ php_censor_hostname }}.conf" dest="/etc/nginx/sites-enabled/{{ php_censor_hostname }}.conf" state=link
  notify: Restart Nginx
  when:   not site_directory.stat.exists

- name:     Create PHP Censor worker systemd service
  template: src=php_censor.service dest="/etc/systemd/system/{{ php_censor_queue_name }}.service"
  when:     not site_directory.stat.exists

- name:    Enable and start PHP Censor worker systemd service
  systemd: name="{{ php_censor_queue_name }}.service" state=started enabled=yes
  when:    not site_directory.stat.exists
